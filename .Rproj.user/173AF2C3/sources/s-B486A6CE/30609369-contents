source("header.R")
homeDirectory <- getwd()

shinyServer(function(input, output, session) {
  #Set proxies to NULL to prevent AWL error
  Sys.setenv(ftp_proxy="")
  Sys.setenv(http_proxy="")
  
  #Shiny reactive values
  values <- reactiveValues()
  values$df <- data.frame(AWL = NA, text_Overlay = NA)
  values$awlSummary <- data.frame(AWL = NA, text_Overlay = NA)
  values$scoreCardTable <- data.frame(LLE_Module = NA, ScoreCardDUTs = NA)
  values$fileVector <- data.frame(Files = NA)
  values$moduleVector <- data.frame( LLE_Modules= NA)
  values$sCardList <- list()
  values$this.awlObject <- NULL
  values$dataToPlotsd <- NULL
  values$imgName <- NULL
  values$xAxisName <- NULL
  values$imgTitle <- NULL
  values$mVars2 <- NULL
  
#Observe Events---------------------------------------------------------------------------------
  observeEvent(
    input$update,{
      if(input$update > 0) {
        showNotification("Table Updated, Click submit job!", duration = 5, closeButton = TRUE, type = "default")
        newLine <- isolate(c(input$awl, input$textOverlay))
        isolate(values$df <- rbind(values$df, newLine)) 
    }})

#Execute Job(Submit job button clicked)--------------------------------------------------------
  observeEvent(
    input$execute,{
      
      if(input$execute >= 1 & input$update > 0){
        showNotification("Job submitted", duration = 5, closeButton = TRUE, type = "default")
       
#------FRom Main1
        values$this.awlObject <- awlObject(
          awlName = as.vector(values$df$AWL)[[2]], 
          includeTextOverlay = as.logical(as.vector(values$df$text_Overlay)[[2]]), 
          waferObjectList = vector("list"), 
          analysisModuleList = list("LLE_RXFIN", "LLE_BLOCK","LLE_PCPB"))
          values$this.awlObject <- create_AWL_User_Directory(values$this.awlObject)
        
#------Fetch AWL Data
        withProgress(fn_AWL_ERF_data(getwd(), awlerflist=values$this.awlObject@awlName), value = 0.1, 
                     message = "Fetching AWL Data from Shiny", style = getShinyOption("progress.style",default = "notification"),
                     detail = NULL )
        values$this.awlObject@waferList <- fread(file="awl_erf.csv", showProgress=TRUE)
        print(values$this.awlObject@waferList)
        values$this.awlObject <- create_awlObject_waferList( values$this.awlObject)
        
        print(getwd())       
        withProgress(values$this.awlObject <- prepAWLDataForPlotting(values$this.awlObject), value = 0.3, 
                     message = "Data preparation", style = getShinyOption("progress.style",default = "notification"),
                     detail = "Fetching Raw Data from Exensio and Prepping" )
        print(getwd())
        generate_Scorecard(values$this.awlObject)
#--------Plotting
        # withProgress(  tryCatch(values$sdPlot <-plot_Summary(values$this.awlObject)), value = 0.5, 
        #                message = "Generating Summary Plots", style = getShinyOption("progress.style",default = "notification"))
        # print(class(sdGgplot))
        withProgress(  tryCatch(plot_AWL_Object(values$this.awlObject)), value = 0.7, 
                     message = "Generating PPT Plots", style = getShinyOption("progress.style",default = "notification"))
        generate_PPT(values$this.awlObject@awlName, values$this.awlObject@awlDirectory, values$this.awlObject@analysisModuleList)
        
        values$fileVector <- data.frame(Files = generate_download_Files(values$this.awlObject@awlDirectory ))
        values$awlSummary <- values$this.awlObject@waferList
        values$moduleVector <- data.frame(LLE_Modules = values$this.awlObject@analysisModuleList)
        
        updateSelectInput(session, "filenames",  choices = values$fileVector)
        updateSelectInput(session, "lleModules",  choices = values$moduleVector)
        
        #PLotting variables-----------------
        
        #Summary to globalref - LLE plots 1 (Split Variability)----------------
        # imgName <- paste( savePath ,"_Summary1_of_Experiments.png", sep="")
        # xAxisName <- "DUTs"
        # imgTitle <- paste(savePath, "Split Variablity (IQR/median) Reference Chart", sep=" ")
        # mVars <- c('r_iqr_med_Vtsat', 'r_iqr_med_Ideff')
        # LLE_Modelling_var(waferDataTable =  dataToPlot, imageName =  imgName, imageTitle =  imgTitle, savePath, xname=xAxisName, measureVars =mVars)
        
        
        #LLe Plots 3(Standard Deviation)----------------------------  
        values$imgName <- paste( values$this.awlObject@awlDirectory ,"_Summary2_of_Experiments.png", sep="")
        values$xAxisName <- "DUTs"
        values$imgTitle <- paste(values$this.awlObject@awlDirectory, "Split Stanard deviation Reference Chart", sep=" ")
        values$mVars2 <- c('sd_Vtsat', 'sd_Ideff')
        dataToPlot3 <- values$this.awlObject@AWLDataTable[order(sd_Vtsat)]
        values$dataToPlotsd <- dataToPlot3[1:10000,]
    }})

#Output Views---------------------------------------------------------------------------------------------  
#Switch between Filenames list for selection
  datasetInput <- reactive({
    switch(input$filenames,
           filenames)
  })
  
  datasetInput <- reactive({
    switch(input$lleModules,
           lleModules)
  })
  
  output$downloadData <- downloadHandler(
    filename = function() {input$filenames},
    content = function(file) {write.csv(read.csv(paste(values$this.awlObject@awlDirectory,"/",input$filenames, sep=""), header=TRUE),file)})
  
  output$downloadPpt <- downloadHandler(
    filename = function() {filename <- paste(input$awl,".pptx",sep="")
    print(filename)},
    content = function(file) {
      file.copy(paste(values$this.awlObject@awlDirectory,"/",input$awl,".pptx",sep=""), file)
      })

  output$table1 <- DT::renderDataTable({values$df})
  
  output$summaryPlots <- renderPlotly({
    tmp_Plot<- LLE_Modelling_sd(waferDataTable =  values$dataToPlotsd, 
                     imageName =  values$imgName, 
                     imageTitle =  values$imgTitle, 
                     values$this.awlObject@awlDirectory, 
                     xname=values$xAxisName, measureVars =values$mVars2)
    print(class(tmp_Plot))
    print(ggplotly(ggplot_build(values$tmp_Plot)))
    })
  
  output$tableScoreCard <- DT::renderDataTable({values$scoreCardTable})
  output$tableAWLSummary <- DT::renderDataTable({values$awlSummary})

})