"0","#Generate agg cols for spi"
"0","spiMatches[, attackH := xg1 +nsxg1 +adj_score1]"
"0","spiMatches[, attackA := xg2 +nsxg2 +adj_score2]"
"0",""
"0","#Column bind spi data and betting data. There are 380 matches every season"
"0","EPL1617 = cbind(EPL1617, spiMatches[1:380,17:24])"
"0","EPL1718 = cbind(EPL1718, spiMatches[381:760,17:24])"
"0","EPL1819 = cbind(EPL1819, spiMatches[761:1140,17:24])"
"0","EPL1920 = cbind(EPL1920, spiMatches[1141:(1140+nrow(EPL1920)),17:24])"
"0",""
"0","#Efficiency; Inefficiency1 being for the home team and Inefficiency2, the away team"
"0","EPL1617[,`:=` (EfficiencyH = FTHG / attackH, EfficiencyA = FTAG / attackA)]"
"0","EPL1718[,`:=` (EfficiencyH = FTHG / attackH, EfficiencyA = FTAG / attackA)]"
"0","EPL1819[,`:=` (EfficiencyH = FTHG / attackH, EfficiencyA = FTAG / attackA)]"
"0","EPL1920[,`:=` (EfficiencyH = FTHG / attackH, EfficiencyA = FTAG / attackA)]"
"0",""
"0","allSeasons = list(EPL1617,EPL1718,EPL1819,EPL1920)"
"0",""
"0","#List to hold all tables that have the new columns"
"0","meltedDataList = list()"
"0",""
"0","#Separate Predictor variables from Aggregators."
"0","aggregateEplCols = c(""HomeTeam"",""AwayTeam"",""FTHG"",""FTAG"",""HTHG"",""HTAG"",""HS"",""AS"",""HST"",""AST"",""HF"",""AF"",""HC"",""AC"",""HY"",""AY"",""HR"",""AR"")"
"0",""
"0","seasonMeltMeasureList = list(c(""HomeTeam"", ""AwayTeam""), c(""FTHG"", ""FTAG""), c(""HTHG"", ""HTAG""), c(""HS"", ""AS""), c(""HST"", ""AST""), c(""HF"", ""AF""), c(""HC"", ""AC""), "
"0","                             c(""HY"", ""AY""), c(""HR"", ""AR""), c(""attackH"", ""attackA""), c(""EfficiencyH"",""EfficiencyA""))"
"0",""
"0","seasonMeltNames = c(""Team"",""FTG"",""HTG"",""Shots"",""ST"",""Fouls"",""Corners"",""Yellow"",""Red"",""attack"",""Efficiency"")"
"0",""
"0","#For loop to aggregate each season data"
"0","for(season in allSeasons){"
"0","  #Melt to combine home and away results - Note separate running averages in future"
"0","  season = melt(season, measure = seasonMeltMeasureList, value.name = seasonMeltNames)"
"0","  meltedDataList[[length(meltedDataList)+1]] <- season"
"0","}"
"0","allMeltedData = rbindlist(meltedDataList)"
"0",""
"0","#New columns for the rolling Averages"
"0","rollingAvgColumns = paste0(c(""FTG"",""HTG"",""Shots"",""ST"",""Fouls"",""Corners"",""Yellow"",""Red"",""attack"",""Efficiency""),""rAvg"")"
"0",""
"0","##Custom function - Find the rolling mean and then shift by 1, so that the previous averages are used"
"0","shift_froll = function(x, n){shift(frollmean(x, n= n))}"
"0","#bMelted[,variable:= as.factor(variable)]"
"0",""
"0","#Rolling Maean and Shift"
"0","allMeltedData[, (rollingAvgColumns):= lapply(.SD, shift_froll,  n = 10), by = c(""Team"",""variable""), .SDcols =  c(""FTG"",""HTG"",""Shots"",""ST"",""Fouls"",""Corners"",""Yellow"",""Red"",""attack"",""Efficiency"")]"
"0",""
"0","#Fill NA values from rolling window and shifting with mean"
"0","allMeltedData[,19:28 := na.aggregate(allMeltedData[,19:28] )]"
"0",""
"0","#Modelling Data"
"0","#--------------"
"0","#Fold data into Home and Away"
"0","awayNames = names(allMeltedData[,19:28])#Get table names except variable"
"0","awayNames = paste0(awayNames,""Away"")#Add away to specify stats"
"0","allHome = allMeltedData[variable == 1, 19:28] #Home Stats without variable"
"0","allAway = allMeltedData[variable == 2, 19:28] #Away stats without the variable"
"0","names(allAway) = awayNames"
"0","allBound = cbind(allHome, allAway)"
"0",""
"0","#Column bind data to get home and away wide table"
"0","finalData = cbind(modelData, allBound,spiMatches[1:nrow(allBound),6:12])"
